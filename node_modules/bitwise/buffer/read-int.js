"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _not = _interopRequireDefault(require("../bits/not"));

var _read = _interopRequireDefault(require("./read"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// 32-bit powers of two wouldn't be possible with <<
var p2 = [];

for (var i = 0; i < 32; i++) {
  p2[i] = Math.pow(2, i);
}
/**
 * Converts a section of a buffer to a signed integer.
 *
 * @example
 * // buffer 11110110
 * readUInt(buffer, 3, 5) => -10
 *
 * @param {Buffer} buffer the buffer to extract information from
 * @param {Number} length the length of the signed integer (in bits)
 * @param {Number} offset where to start (in bits)
 * @return {Number}
 */


var _default = function _default(buffer) {
  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  var length = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 8;
  var bits = (0, _read.default)(buffer, offset, length);

  if (bits[0] === 0) {
    var result = 0;

    for (var _i = 0; _i < length; _i++) {
      if (bits[_i]) result += p2[length - _i - 1];
    }

    return result;
  } else {
    var _result = -1;

    var inverted = (0, _not.default)(bits);

    for (var _i2 = 0; _i2 < length; _i2++) {
      if (inverted[_i2]) _result -= p2[length - _i2 - 1];
    }

    return _result;
  }
};

exports.default = _default;