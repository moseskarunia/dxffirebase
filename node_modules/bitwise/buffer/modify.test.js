"use strict";

var _ = _interopRequireDefault(require("../"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

test('with one bit of data', function () {
  var buffer = Buffer.alloc(1);

  _.default.buffer.modify(buffer, _.default.string.toBits('1'));

  expect(_.default.buffer.read(buffer).join()).toBe(_.default.string.toBits('1000 0000').join());
});
test('without offset', function () {
  var buffer = Buffer.from('FBA8', 'hex');

  _.default.buffer.modify(buffer, _.default.string.toBits('01010'));

  expect(_.default.buffer.read(buffer).join()).toBe(_.default.string.toBits('0101 0011 1010 1000').join());
});
test('with offset', function () {
  var buffer = Buffer.from('A43A', 'hex');

  _.default.buffer.modify(buffer, _.default.string.toBits('01001001'), 3);

  expect(_.default.buffer.read(buffer).join()).toBe(_.default.string.toBits('1010 1001 0011 1010').join());
});
test('with one byte offset', function () {
  var buffer = Buffer.from('AC14E974', 'hex');

  _.default.buffer.modify(buffer, _.default.string.toBits('01001001'), 8);

  expect(_.default.buffer.read(buffer).join()).toBe(_.default.string.toBits('1010 1100 0100 1001 1110 1001 0111 0100').join());
});